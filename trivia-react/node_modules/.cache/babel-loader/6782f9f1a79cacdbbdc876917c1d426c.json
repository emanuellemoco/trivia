{"ast":null,"code":"var _jsxFileName = \"C:\\\\node\\\\trivia\\\\trivia-react\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Question from \"./components/Question\";\nimport Highscore from \"./components/Highscore\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.createJson = async () => {\n      let lista = [];\n      this.setState({\n        loading: true\n      });\n      await fetch(\"https://opentdb.com/api.php?amount=50\").then(response => response.json()).then(data => {\n        data.results[0].incorrect_answers.map(incorrect => {\n          lista.push(incorrect);\n        });\n        lista.push(data.results[0].correct_answer);\n        this.makeSuffle(lista);\n        this.setState({\n          loading: false,\n          listAnwser: lista,\n          quiz: data\n        });\n      });\n      this.setState({\n        question: this.state.quiz.results[0].question\n      });\n      this.setState({\n        correct_answer: this.state.quiz.results[0].correct_answer\n      });\n      this.setState({\n        category: this.state.quiz.results[0].category\n      });\n      return true;\n    };\n\n    this.createJsonBoolean = async () => {\n      let lista = [];\n      this.setState({\n        loading: true\n      });\n      await fetch(\"https://opentdb.com/api.php?amount=50&type=boolean\").then(response => response.json()).then(data => {\n        data.results[0].incorrect_answers.map(incorrect => {\n          lista.push(incorrect);\n        });\n        lista.push(data.results[0].correct_answer);\n        this.makeSuffle(lista);\n        this.setState({\n          loading: false,\n          listAnwser: lista,\n          quiz: data\n        });\n      });\n      this.setState({\n        question: this.state.quiz.results[0].question\n      });\n      this.setState({\n        correct_answer: this.state.quiz.results[0].correct_answer\n      });\n      this.setState({\n        category: this.state.quiz.results[0].category\n      });\n      return true;\n    };\n\n    this.createJsonMultiple = async () => {\n      let lista = [];\n      this.setState({\n        loading: true\n      });\n      await fetch(\"https://opentdb.com/api.php?amount=50&type=multiple\").then(response => response.json()).then(data => {\n        data.results[0].incorrect_answers.map(incorrect => {\n          lista.push(incorrect);\n        });\n        lista.push(data.results[0].correct_answer);\n        this.makeSuffle(lista);\n        this.setState({\n          loading: false,\n          listAnwser: lista,\n          quiz: data\n        });\n      });\n      this.setState({\n        question: this.state.quiz.results[0].question\n      });\n      this.setState({\n        correct_answer: this.state.quiz.results[0].correct_answer\n      });\n      this.setState({\n        category: this.state.quiz.results[0].category\n      });\n      return true;\n    };\n\n    this.clicked = event => {\n      if (this.checkAnswer(event.currentTarget.name)) {\n        this.createSetState();\n      } //else: parte do game over\n\n    };\n\n    this.creatJsonCategory = async event => {\n      var type = event.target.value; //zerar os dados e o id\n\n      this.setState({\n        id: 0\n      });\n      let b = await this.createScore();\n\n      if (type === \"anyType\") {\n        let a = await this.createJson();\n      }\n\n      if (type === 'multiple') {\n        let a = await this.createJsonMultiple();\n      }\n\n      if (type === 'boolean') {\n        let a = await this.createJsonBoolean();\n      }\n    };\n\n    this.createSetState = () => {\n      let lista = [];\n      this.state.quiz.results[this.state.id + 1].incorrect_answers.map(incorrect => {\n        lista.push(incorrect);\n      });\n      let correct = this.state.quiz.results[this.state.id + 1].correct_answer;\n      lista.push(correct);\n      this.makeSuffle(lista);\n      this.setState({\n        question: this.state.quiz.results[this.state.id + 1].question,\n        correct_answer: this.state.quiz.results[this.state.id + 1].correct_answer,\n        listAnwser: lista\n      });\n    };\n\n    this.checktop10 = score => {\n      let scores = this.state.scores_score; //lista com todos os scores\n\n      let lastScore = scores[9];\n\n      if (score > lastScore) {\n        var name = prompt(\"GREAT! You are in the top 10, type your name:\"); //atualizar o nome da pessoa e o score no banco de dados\n\n        let usuarios = this.state.usuarios_score;\n        let lastUser = usuarios[9]; //chama funcao insertScore para adicionar o novo score\n\n        this.insertScore(name, score);\n      }\n    };\n\n    this.checkAnswer = async answer => {\n      if (answer === this.state.correct_answer) {\n        let id_novo = this.state.id + 1;\n        this.setState({\n          id: id_novo\n        });\n        return true;\n      } else {\n        alert(\"Wrong answer. Game over.                                                                   The correct answes was: \" + this.state.correct_answer);\n        this.checktop10(this.state.id); //mandando a qtd de acertos e confere se ta no top10\n        //zerar o id \n\n        this.setState({\n          id: 0\n        });\n        let a = await this.createJson();\n        let b = await this.createScore();\n        this.setState({\n          question: this.state.quiz.results[0].question\n        });\n        this.setState({\n          correct_answer: this.state.quiz.results[0].correct_answer\n        });\n        return false;\n      }\n    };\n\n    this.createScore = async () => {\n      let listaUsuarios = [];\n      let listaScores = [];\n      await fetch(\"http://localhost:4000/highscore\").then(response => response.json()).then(data => {\n        this.setState({\n          highscore: data,\n          usuarios_score: listaUsuarios,\n          scores_score: listaScores\n        });\n\n        for (var i = 0; i < 10; i++) {\n          listaUsuarios.push(this.state.highscore.data[i].usuario);\n          listaScores.push(this.state.highscore.data[i].score);\n        }\n      });\n      return true;\n    };\n\n    this.insertScore = async (name, score) => {\n      await axios.get(\"http://localhost:4000/insert\", {\n        params: {\n          name,\n          score\n        }\n      });\n      return true;\n    };\n\n    this.state = {\n      loading: false,\n      quiz: [],\n      listAnwser: [],\n      category: \"\",\n      question: \"\",\n      correct_answer: \"\",\n      id: 0,\n      difficulty: \"\",\n      type: \"\",\n      highscore: [],\n      usuario: \"\",\n      score: \"\",\n      usuarios_score: [],\n      scores_score: []\n    };\n  }\n\n  componentDidMount() {\n    let lista = [];\n    this.setState({\n      loading: true\n    });\n    fetch(\"https://opentdb.com/api.php?amount=50\").then(response => response.json()).then(data => {\n      this.state.quiz.push(data);\n      data.results[0].incorrect_answers.map(incorrect => {\n        lista.push(incorrect);\n      });\n      lista.push(data.results[0].correct_answer);\n      this.makeSuffle(lista);\n      this.setState({\n        loading: false,\n        listAnwser: lista,\n        quiz: data\n      });\n      this.setState({\n        question: this.state.quiz.results[0].question\n      });\n      this.setState({\n        category: this.state.quiz.results[0].category\n      });\n      this.setState({\n        correct_answer: this.state.quiz.results[0].correct_answer\n      });\n    });\n    this.createScore();\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  makeSuffle(lista) {\n    for (var i = lista.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = lista[i];\n      lista[i] = lista[j];\n      lista[j] = temp;\n    }\n  }\n\n  render() {\n    const date = new Date();\n    const hours = date.getHours();\n    let timeOfDay;\n\n    if (hours < 12) {\n      timeOfDay = \"morning\";\n    } else if (hours >= 12 && hours < 17) {\n      timeOfDay = \"afternon\";\n    } else {\n      timeOfDay = \"night\";\n    } // current day\n    // adjust 0 before single digit date\n\n\n    let day = (\"0\" + date.getDate()).slice(-2); // current month\n\n    let month = (\"0\" + (date.getMonth() + 1)).slice(-2); // current year\n\n    let year = date.getFullYear();\n    let fullDate = year + \"-\" + month + \"-\" + day;\n    const text = this.state.loading ? \"loading...\" : this.state.quiz.question;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"Good \", timeOfDay, \"!! Let's play trivia? \\u2003\\u2003\\u2003\\u2003\\u2003 \", fullDate, \" \")), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Choose the type: \"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      name: \"option\",\n      onChange: this.creatJsonCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"anyType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Any category\"), React.createElement(\"option\", {\n      value: \"multiple\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Multiple Choiche\"), React.createElement(\"option\", {\n      value: \"boolean\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"True / False\"))), React.createElement(Question, {\n      question: this.state.question,\n      id: this.state.id,\n      category: this.state.category,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, text), React.createElement(\"button\", {\n      onClick: this.clicked,\n      type: \"submit\",\n      name: this.state.listAnwser[0],\n      style: {\n        display: !this.state.listAnwser[0] && \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, this.state.listAnwser[0]), React.createElement(\"button\", {\n      onClick: this.clicked,\n      type: \"submit\",\n      name: this.state.listAnwser[1],\n      style: {\n        display: !this.state.listAnwser[1] && \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, this.state.listAnwser[1]), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.clicked,\n      type: \"submit\",\n      name: this.state.listAnwser[2],\n      style: {\n        display: !this.state.listAnwser[2] && \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, this.state.listAnwser[2]), React.createElement(\"button\", {\n      onClick: this.clicked,\n      type: \"submit\",\n      name: this.state.listAnwser[3],\n      style: {\n        display: !this.state.listAnwser[3] && \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, this.state.listAnwser[3]), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"Quantidade de acertos: \", this.state.id, \" \"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(Highscore, {\n      usuarios: this.state.usuarios_score,\n      scores: this.state.scores_score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/node/trivia/trivia-react/src/App.js"],"names":["React","Component","Question","Highscore","axios","App","constructor","createJson","lista","setState","loading","fetch","then","response","json","data","results","incorrect_answers","map","incorrect","push","correct_answer","makeSuffle","listAnwser","quiz","question","state","category","createJsonBoolean","createJsonMultiple","clicked","event","checkAnswer","currentTarget","name","createSetState","creatJsonCategory","type","target","value","id","b","createScore","a","correct","checktop10","score","scores","scores_score","lastScore","prompt","usuarios","usuarios_score","lastUser","insertScore","answer","id_novo","alert","listaUsuarios","listaScores","highscore","i","usuario","get","params","difficulty","componentDidMount","handleSubmit","preventDefault","length","j","Math","floor","random","temp","render","date","Date","hours","getHours","timeOfDay","day","getDate","slice","month","getMonth","year","getFullYear","fullDate","text","display"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\n\nimport Question from  \"./components/Question\";\nimport Highscore from  \"./components/Highscore\";\nimport axios from \"axios\"\nimport \"./App.css\";\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state={\n            loading: false,\n            quiz: [],\n            listAnwser: [],\n            category: \"\",\n            question: \"\",\n            correct_answer: \"\",\n            id: 0,\n            difficulty: \"\",\n            type: \"\" ,\n            highscore: [],\n            usuario: \"\",\n            score: \"\",\n            usuarios_score: [],\n            scores_score: []\n        }\n    }\n\n    componentDidMount() {\n        let lista = []\n        this.setState({loading : true})\n        fetch(\"https://opentdb.com/api.php?amount=50\")\n            .then(response => response.json())\n            .then(data => { \n                this.state.quiz.push(data)\n                data.results[0].incorrect_answers.map(\n                    incorrect=>{lista.push(incorrect)\n                })\n                lista.push(data.results[0].correct_answer)   \n                this.makeSuffle(lista)                \n\n                this.setState({\n                    loading: false,\n                    listAnwser : lista,\n                    quiz : data\n                })\n                this.setState({question:this.state.quiz.results[0].question})\n                this.setState({category:this.state.quiz.results[0].category})\n                this.setState({correct_answer:this.state.quiz.results[0].correct_answer})  \n            })\n            this.createScore()      \n    }\n    createJson = async ()=> {\n        let lista = []\n        this.setState({loading : true})\n        await fetch(\"https://opentdb.com/api.php?amount=50\")\n            .then(response => response.json())  \n            .then(data => { \n                data.results[0].incorrect_answers.map(\n                    incorrect=>{lista.push(incorrect)\n                })\n                lista.push(data.results[0].correct_answer)   \n                this.makeSuffle(lista)                \n\n                this.setState({\n                    loading: false,\n                    listAnwser : lista,\n                    quiz : data,\n                })\n            })\n            this.setState({question:this.state.quiz.results[0].question})\n            this.setState({correct_answer:this.state.quiz.results[0].correct_answer})\n            this.setState({category:this.state.quiz.results[0].category})\n            return true\n    } \n    createJsonBoolean = async ()=> {\n        let lista = []\n        this.setState({loading : true})\n        await fetch(\"https://opentdb.com/api.php?amount=50&type=boolean\")\n            .then(response => response.json())  \n            .then(data => { \n                data.results[0].incorrect_answers.map(\n                    incorrect=>{lista.push(incorrect)\n                })\n                lista.push(data.results[0].correct_answer)   \n                this.makeSuffle(lista)                \n                this.setState({\n                    loading: false,\n                    listAnwser : lista,\n                    quiz : data,\n                })\n            })\n            this.setState({question:this.state.quiz.results[0].question})\n            this.setState({correct_answer:this.state.quiz.results[0].correct_answer})\n            this.setState({category:this.state.quiz.results[0].category})             \n            return true\n    } \n    \n    createJsonMultiple = async ()=> {\n        let lista = []\n        this.setState({loading : true})\n        await fetch(\"https://opentdb.com/api.php?amount=50&type=multiple\")\n            .then(response => response.json())  \n            .then(data => { \n                data.results[0].incorrect_answers.map(\n                    incorrect=>{lista.push(incorrect)\n                })\n                lista.push(data.results[0].correct_answer)   \n                this.makeSuffle(lista)                \n                this.setState({\n                    loading: false,\n                    listAnwser : lista,\n                    quiz : data,\n                })\n            })\n            this.setState({question:this.state.quiz.results[0].question})\n            this.setState({correct_answer:this.state.quiz.results[0].correct_answer})\n            this.setState({category:this.state.quiz.results[0].category})            \n            return true\n    }\n\n    clicked = (event) => {        \n        if (this.checkAnswer(event.currentTarget.name)){\n            this.createSetState()\n        }\n        //else: parte do game over\n    }\n\n    creatJsonCategory = async(event)=> {\n        var type = event.target.value\n\n        //zerar os dados e o id\n        this.setState({id:0})\n        let b = await this.createScore()    \n        \n        if (type === \"anyType\"){\n            let a = await this.createJson() \n        }\n        if (type === 'multiple'){\n            let a = await this.createJsonMultiple() \n        }\n        if (type === 'boolean'){\n            let a = await this.createJsonBoolean() \n        }    \n    }\n\n    createSetState = () => {\n        let lista = []\n        this.state.quiz.results[this.state.id+1].incorrect_answers.map( \n            incorrect=>{lista.push(incorrect)})\n            \n        let correct = this.state.quiz.results[this.state.id+1].correct_answer\n        lista.push(correct)\n\n        this.makeSuffle(lista)\n\n        this.setState({\n            question:this.state.quiz.results[this.state.id+1].question,\n            correct_answer:this.state.quiz.results[this.state.id+1].correct_answer,\n            listAnwser: lista  \n        })\n    }\n    checktop10 = (score) => {\n        let scores = this.state.scores_score //lista com todos os scores\n\n        let lastScore = scores[9]\n        if (score > lastScore){ \n            var name = prompt(\"GREAT! You are in the top 10, type your name:\");\n            //atualizar o nome da pessoa e o score no banco de dados\n            let usuarios = this.state.usuarios_score\n            let lastUser = usuarios[9]\n\n            //chama funcao insertScore para adicionar o novo score\n            this.insertScore(name, score)\n        }\n    }\n\n    checkAnswer = async (answer)=>{\n        if (answer === this.state.correct_answer){\n            let id_novo = this.state.id + 1\n            this.setState({id:id_novo})\n            return true\n        }\n        else {\n            alert(\"Wrong answer. Game over.                                                                   The correct answes was: \" + this.state.correct_answer)\n            this.checktop10(this.state.id) //mandando a qtd de acertos e confere se ta no top10\n            \n            //zerar o id \n            this.setState({id:0})\n            let a = await this.createJson() \n            let b = await this.createScore()\n            this.setState({question:this.state.quiz.results[0].question})\n            this.setState({correct_answer:this.state.quiz.results[0].correct_answer}) \n            return false \n        }\n    }\n\n    handleSubmit(event){\n        event.preventDefault();\n\n    }\n\n    makeSuffle(lista){\n        for (var i = lista.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = lista[i];\n            lista[i] = lista[j];\n            lista[j] = temp;\n        }\n    }\n\n    createScore = async ()=> {\n        let listaUsuarios = []\n        let listaScores = []\n\n        await fetch(\"http://localhost:4000/highscore\")\n            .then(response => response.json())  \n            .then(data => { \n                this.setState({\n                    highscore : data,\n                    usuarios_score : listaUsuarios,\n                    scores_score : listaScores\n                })\n\n                for (var i=0; i<10; i++){\n                    listaUsuarios.push(this.state.highscore.data[i].usuario)\n                    listaScores.push(this.state.highscore.data[i].score)\n                }\n            })\n            return true\n    }  \n    \n    insertScore = async (name, score)=> {\n        await axios.get(\"http://localhost:4000/insert\",{\n            params:{\n                name,score\n            }\n        })\n            return true\n    } \n    \n    render() {\n        const date = new Date()\n        const hours = date.getHours()\n        let timeOfDay\n\n        if (hours<12){\n            timeOfDay = \"morning\"\n        } else if (hours>=12 && hours <17){\n            timeOfDay = \"afternon\"\n        } else {\n            timeOfDay = \"night\"\n        }\n\n        // current day\n        // adjust 0 before single digit date\n        let day = (\"0\" + date.getDate()).slice(-2);\n        // current month\n        let month = (\"0\" + (date.getMonth() + 1)).slice(-2);\n        // current year\n        let year = date.getFullYear();\n\n        let fullDate = year + \"-\" + month  + \"-\" + day\n\n        const text = this.state.loading ? \"loading...\" : this.state.quiz.question\n        \n        return( \n            <div>\n                <nav>                \n                <h3>Good {timeOfDay}!! Let's play trivia? &emsp;&emsp;&emsp;&emsp;&emsp; {fullDate} </h3>\n                </nav>\n                <main>\n                \n                <h6>Choose the type: </h6>\n                <form>\n                <select name=\"option\" onChange={this.creatJsonCategory}>\n                    <option value=\"anyType\">Any category</option>\n                    <option value=\"multiple\">Multiple Choiche</option> \n                    <option value=\"boolean\">True / False</option>\n                </select>\n                </form>               \n                \n                <Question question={this.state.question} id={this.state.id} category={this.state.category}/>\n                <p>{text}</p>\n\n                <button onClick={this.clicked} type=\"submit\" name={this.state.listAnwser[0]} style={{display: !this.state.listAnwser[0] && \"none\"}}>{this.state.listAnwser[0]}</button>\n                <button onClick={this.clicked} type=\"submit\" name={this.state.listAnwser[1]}  style={{display: !this.state.listAnwser[1] && \"none\"}}>{this.state.listAnwser[1]}</button>\n                <br/><br/>\n                <button onClick={this.clicked} type=\"submit\" name={this.state.listAnwser[2]}  style={{display: !this.state.listAnwser[2] && \"none\"}}>{this.state.listAnwser[2]}</button>\n                <button onClick={this.clicked} type=\"submit\" name={this.state.listAnwser[3]}  style={{display: !this.state.listAnwser[3] && \"none\"}}>{this.state.listAnwser[3]}</button>\n                               \n                <br></br><br></br> \n\n                <h5>Quantidade de acertos: {this.state.id} </h5>\n                <hr/>  \n                \n                <Highscore usuarios={this.state.usuarios_score} scores={this.state.scores_score}/>\n                </main>\n            </div> \n        )\n    }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}