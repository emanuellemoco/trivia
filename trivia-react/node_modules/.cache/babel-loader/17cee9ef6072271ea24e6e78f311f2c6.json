{"ast":null,"code":"var _jsxFileName = \"C:\\\\node\\\\trivia\\\\trivia-react\\\\src\\\\App.js\";\n//colocar high score\n//mostrar numero de acertos\n//mostrar a resposta certa quando a pessoa errar\n//mostrar a categoria\n//deixar a pessoa escolher a categoria\nimport React, { Component } from \"react\"; // import Footer from \"./components/Footer\";\n//import Header from \"./components/Header\";\n\nimport Question from \"./components/Question\";\nimport Highscore from \"./components/Highscore\";\nimport axios from \"axios\";\nimport \"./App.css\"; //import { qualifiedTypeIdentifier } from \"@babel/types\";\n//import { list } from \"postcss\"; \n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.createJson = async () => {\n      let lista = [];\n      this.setState({\n        loading: true\n      });\n      await fetch(\"https://opentdb.com/api.php?amount=50\").then(response => response.json()).then(data => {\n        data.results[0].incorrect_answers.map(incorrect => {\n          lista.push(incorrect);\n        });\n        lista.push(data.results[0].correct_answer);\n        this.makeSuffle(lista);\n        this.setState({\n          loading: false,\n          listAnwser: lista,\n          quiz: data\n        });\n      });\n      this.setState({\n        question: this.state.quiz.results[0].question\n      });\n      this.setState({\n        correct_answer: this.state.quiz.results[0].correct_answer\n      });\n      this.setState({\n        category: this.state.quiz.results[0].category\n      });\n      console.log(this.state.quiz.results[0].correct_answer);\n      return true;\n    };\n\n    this.createJsonBoolean = async () => {\n      let lista = [];\n      this.setState({\n        loading: true\n      });\n      await fetch(\"https://opentdb.com/api.php?amount=50&type=boolean\").then(response => response.json()).then(data => {\n        data.results[0].incorrect_answers.map(incorrect => {\n          lista.push(incorrect);\n          console.log(\"entrou boolean\");\n          console.log(data);\n        });\n        lista.push(data.results[0].correct_answer);\n        this.makeSuffle(lista);\n        this.setState({\n          loading: false,\n          listAnwser: lista,\n          quiz: data\n        });\n      });\n      console.log(this.state.quiz);\n      console.log(this.state.quiz.results[0].question);\n      this.setState({\n        question: this.state.quiz.results[0].question\n      });\n      this.setState({\n        correct_answer: this.state.quiz.results[0].correct_answer\n      });\n      this.setState({\n        category: this.state.quiz.results[0].category\n      });\n      console.log(this.state.quiz.results[0].correct_answer);\n      return true;\n    };\n\n    this.createJsonMultiple = async () => {\n      let lista = [];\n      this.setState({\n        loading: true\n      });\n      await fetch(\"https://opentdb.com/api.php?amount=50&type=multiple\").then(response => response.json()).then(data => {\n        data.results[0].incorrect_answers.map(incorrect => {\n          lista.push(incorrect);\n        });\n        lista.push(data.results[0].correct_answer);\n        this.makeSuffle(lista);\n        this.setState({\n          loading: false,\n          listAnwser: lista,\n          quiz: data\n        });\n      });\n      console.log(this.state.quiz);\n      console.log(this.state.quiz.results[0].question);\n      this.setState({\n        question: this.state.quiz.results[0].question\n      });\n      this.setState({\n        correct_answer: this.state.quiz.results[0].correct_answer\n      });\n      this.setState({\n        category: this.state.quiz.results[0].category\n      });\n      console.log(this.state.quiz.results[0].correct_answer);\n      return true;\n    };\n\n    this.clicked = event => {\n      if (this.checkAnswer(event.currentTarget.name)) {\n        this.createSetState();\n      } //else: parte do game over\n\n    };\n\n    this.creatJsonCategory = async event => {\n      console.log(\"entrou creatJsonCategory\");\n      var type = event.target.value;\n      console.log(event.target.value); //pegando multiple quando eh pra ser truefalse\n      //zerar os dados\n      //zerar o id \n\n      this.setState({\n        id: 0\n      });\n      let b = await this.createScore();\n      console.log(this.state.quiz);\n      console.log(this.state.quiz.results[0].question); //this.setState({question:this.state.quiz.results[0].question})\n      //this.setState({correct_answer:this.state.quiz.results[0].correct_answer})\n\n      if (type === \"anyType\") {\n        // this.createJson()\n        let a = await this.createJson();\n      }\n\n      if (type === 'multiple') {\n        let a = await this.createJsonMultiple(); //this.createJsonMultiple()\n      }\n\n      if (type === 'boolean') {\n        let a = await this.createJsonBoolean(); //this.createJsonBoolean()\n      }\n    };\n\n    this.createSetState = () => {\n      //console.log(\"entrou no create state\")\n      //console.log(this.state.id +1) //pois o primeiro foi no componentdidmout\n      let lista = [];\n      this.state.quiz.results[this.state.id + 1].incorrect_answers.map(incorrect => {\n        lista.push(incorrect);\n      });\n      let correct = this.state.quiz.results[this.state.id + 1].correct_answer;\n      console.log(correct);\n      lista.push(correct);\n      this.makeSuffle(lista);\n      this.setState({\n        question: this.state.quiz.results[this.state.id + 1].question,\n        correct_answer: this.state.quiz.results[this.state.id + 1].correct_answer,\n        listAnwser: lista\n      });\n    };\n\n    this.checktop10 = score => {\n      console.log(\"entrou top 10\"); //\n\n      let scores = this.state.scores_score; //lista com todos os scores\n\n      let lastScore = scores[9]; //OBS ARRUMAR AQUI PARA > **\n      //NAO ESQUECER DE ARRUMAR AQUI\n\n      if (score > lastScore) {\n        //////////AAAAAAAAARRRUMAR AQUI\n        var name = prompt(\"GREAT! You are in the top 10, type your name:\"); //atualizar o nome da pessoa e o score no banco de dados\n\n        let usuarios = this.state.usuarios_score;\n        let lastUser = usuarios[9]; //chama funcao updateScore para adicionar o novo score\n\n        this.insertScore(name, score);\n      }\n    };\n\n    this.checkAnswer = async answer => {\n      if (answer === this.state.correct_answer) {\n        let id_novo = this.state.id + 1;\n        this.setState({\n          id: id_novo\n        });\n        console.log(\"ACERTO\"); //clicked chamao checkAnswer e se true chama createSetState\n\n        return true;\n      } else {\n        console.log(\"ERROU\");\n        alert(\"Wrong answer. Game over.                                                                   The correct answes was: \" + this.state.correct_answer); //alert(\"The correct answes was: \" + this.state.correct_answer)\n\n        console.log(\"chamando o checktop10\");\n        this.checktop10(this.state.id); //mandando a qtd de acertos e confere se ta no top10\n        //zerar o id \n\n        this.setState({\n          id: 0\n        });\n        let a = await this.createJson();\n        let b = await this.createScore();\n        console.log(\"TESTE\");\n        console.log(this.state.quiz);\n        console.log(this.state.quiz.results[0].question);\n        this.setState({\n          question: this.state.quiz.results[0].question\n        });\n        this.setState({\n          correct_answer: this.state.quiz.results[0].correct_answer\n        });\n        return false;\n      }\n    };\n\n    this.createScore = async () => {\n      let listaUsuarios = [];\n      let listaScores = []; //console.log(\"entrou no createScore\")\n\n      this.setState({\n        loading: true\n      });\n      await fetch(\"http://localhost:4000/highscore\").then(response => response.json()).then(data => {\n        this.setState({\n          highscore: data,\n          usuarios_score: listaUsuarios,\n          scores_score: listaScores\n        }); //console.log(data)    \n        //his.state.highscore.push(data)\n        //console.log(this.state.highscore.data[0].usuario)\n\n        for (var i = 0; i < 10; i++) {\n          // console.log(i)\n          // console.log(this.state.highscore.data[i].usuario)\n          listaUsuarios.push(this.state.highscore.data[i].usuario);\n          listaScores.push(this.state.highscore.data[i].score);\n        }\n      });\n      return true;\n    };\n\n    this.insertScore = async (name, score) => {\n      console.log(\"name: \" + name);\n      console.log(\"score: \" + score);\n      this.setState({\n        loading: true\n      });\n      await axios.get(\"http://localhost:4000/insert\", {\n        params: {\n          name,\n          score\n        }\n      });\n      return true;\n    };\n\n    this.state = {\n      loading: false,\n      quiz: [],\n      listAnwser: [],\n      category: \"\",\n      question: \"\",\n      correct_answer: \"\",\n      id: 0,\n      difficulty: \"\",\n      type: \"\",\n      highscore: [],\n      usuario: \"\",\n      score: \"\",\n      usuarios_score: [],\n      scores_score: []\n    };\n  }\n\n  componentDidMount() {\n    let lista = [];\n    this.setState({\n      loading: true\n    });\n    fetch(\"https://opentdb.com/api.php?amount=50\").then(response => response.json()) //.then(data => console.log(data))\n    .then(data => {\n      this.state.quiz.push(data);\n      data.results[0].incorrect_answers.map(incorrect => {\n        lista.push(incorrect); //console.log(data)\n      });\n      lista.push(data.results[0].correct_answer);\n      this.makeSuffle(lista);\n      this.setState({\n        loading: false,\n        listAnwser: lista,\n        quiz: data\n      }); //results[i] para cada resultado\n\n      this.setState({\n        question: this.state.quiz.results[0].question\n      });\n      this.setState({\n        category: this.state.quiz.results[0].category\n      });\n      console.log(this.state.quiz.results[0].correct_answer);\n      this.setState({\n        correct_answer: this.state.quiz.results[0].correct_answer\n      }); // this.setState({category:this.state.quiz[0].results[0].category})\n      // this.setState({difficulty:this.state.quiz[0].results[0].difficulty})\n      // this.setState({type:this.state.quiz[0].results[0].type})   \n    });\n    this.createScore();\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  makeSuffle(lista) {\n    for (var i = lista.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = lista[i];\n      lista[i] = lista[j];\n      lista[j] = temp;\n    }\n  }\n\n  render() {\n    // const frist = \"primeiro\"\n    // const second = \"segundo\"\n    const date = new Date();\n    const hours = date.getHours();\n    let timeOfDay;\n\n    if (hours < 12) {\n      timeOfDay = \"morning\";\n    } else if (hours >= 12 && hours < 17) {\n      timeOfDay = \"afternon\";\n    } else {\n      timeOfDay = \"night\";\n    }\n\n    const text = this.state.loading ? \"loading...\" : this.state.quiz.question; //console.log(this.state.question)\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"Good \", timeOfDay, \"!! Let's play trivia?\")), React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, \"Choose the type: \"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      name: \"option\",\n      onChange: this.creatJsonCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"anyType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"Any category\"), React.createElement(\"option\", {\n      value: \"multiple\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, \"Multiple Choiche\"), React.createElement(\"option\", {\n      value: \"boolean\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"True / False\"))), React.createElement(Question, {\n      question: this.state.question,\n      id: this.state.id,\n      category: this.state.category,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, text), React.createElement(\"button\", {\n      onClick: this.clicked,\n      type: \"submit\",\n      name: this.state.listAnwser[0],\n      style: {\n        display: !this.state.listAnwser[0] && \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, this.state.listAnwser[0]), React.createElement(\"button\", {\n      onClick: this.clicked,\n      type: \"submit\",\n      name: this.state.listAnwser[1],\n      style: {\n        display: !this.state.listAnwser[1] && \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, this.state.listAnwser[1]), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.clicked,\n      type: \"submit\",\n      name: this.state.listAnwser[2],\n      style: {\n        display: !this.state.listAnwser[2] && \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, this.state.listAnwser[2]), React.createElement(\"button\", {\n      onClick: this.clicked,\n      type: \"submit\",\n      name: this.state.listAnwser[3],\n      style: {\n        display: !this.state.listAnwser[3] && \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, this.state.listAnwser[3]), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"Quantidade de acertos: \", this.state.id, \" \"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), React.createElement(Highscore, {\n      usuarios: this.state.usuarios_score,\n      scores: this.state.scores_score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/node/trivia/trivia-react/src/App.js"],"names":["React","Component","Question","Highscore","axios","App","constructor","createJson","lista","setState","loading","fetch","then","response","json","data","results","incorrect_answers","map","incorrect","push","correct_answer","makeSuffle","listAnwser","quiz","question","state","category","console","log","createJsonBoolean","createJsonMultiple","clicked","event","checkAnswer","currentTarget","name","createSetState","creatJsonCategory","type","target","value","id","b","createScore","a","correct","checktop10","score","scores","scores_score","lastScore","prompt","usuarios","usuarios_score","lastUser","insertScore","answer","id_novo","alert","listaUsuarios","listaScores","highscore","i","usuario","get","params","difficulty","componentDidMount","handleSubmit","preventDefault","length","j","Math","floor","random","temp","render","date","Date","hours","getHours","timeOfDay","text","display"],"mappings":"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","sourcesContent":["//colocar high score\n//mostrar numero de acertos\n//mostrar a resposta certa quando a pessoa errar\n//mostrar a categoria\n\n//deixar a pessoa escolher a categoria\n\nimport React, {Component} from \"react\";\n// import Footer from \"./components/Footer\";\n//import Header from \"./components/Header\";\nimport Question from  \"./components/Question\";\nimport Highscore from  \"./components/Highscore\";\nimport axios from \"axios\"\n\nimport \"./App.css\";\n//import { qualifiedTypeIdentifier } from \"@babel/types\";\n//import { list } from \"postcss\"; \n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state={\n            loading: false,\n            quiz: [],\n            listAnwser: [],\n            category: \"\",\n            question: \"\",\n            correct_answer: \"\",\n            id: 0,\n            difficulty: \"\",\n            type: \"\" ,\n            highscore: [],\n            usuario: \"\",\n            score: \"\",\n            usuarios_score: [],\n            scores_score: []\n        }\n    }\n\n    componentDidMount() {\n        let lista = []\n        this.setState({loading : true})\n        fetch(\"https://opentdb.com/api.php?amount=50\")\n            .then(response => response.json())\n            \n            //.then(data => console.log(data))\n            .then(data => { \n                this.state.quiz.push(data)\n                data.results[0].incorrect_answers.map(\n                    incorrect=>{lista.push(incorrect)\n                        //console.log(data)\n                })\n                lista.push(data.results[0].correct_answer)   \n                this.makeSuffle(lista)                \n\n                this.setState({\n                    loading: false,\n                    listAnwser : lista,\n                    quiz : data\n                })\n                //results[i] para cada resultado\n                this.setState({question:this.state.quiz.results[0].question})\n                this.setState({category:this.state.quiz.results[0].category})\n                console.log(this.state.quiz.results[0].correct_answer)\n                this.setState({correct_answer:this.state.quiz.results[0].correct_answer})\n                // this.setState({category:this.state.quiz[0].results[0].category})\n                // this.setState({difficulty:this.state.quiz[0].results[0].difficulty})\n                // this.setState({type:this.state.quiz[0].results[0].type})   \n            })\n            this.createScore()\n           \n    }\n\n\n    createJson = async ()=> {\n        let lista = []\n        this.setState({loading : true})\n        await fetch(\"https://opentdb.com/api.php?amount=50\")\n            .then(response => response.json())  \n            .then(data => { \n                data.results[0].incorrect_answers.map(\n                    incorrect=>{lista.push(incorrect)\n                })\n                lista.push(data.results[0].correct_answer)   \n                this.makeSuffle(lista)                \n\n                this.setState({\n                    loading: false,\n                    listAnwser : lista,\n                    quiz : data,\n                })\n            })\n            this.setState({question:this.state.quiz.results[0].question})\n            this.setState({correct_answer:this.state.quiz.results[0].correct_answer})\n            this.setState({category:this.state.quiz.results[0].category})\n            console.log(this.state.quiz.results[0].correct_answer)\n            return true\n    } \n    createJsonBoolean = async ()=> {\n        let lista = []\n        this.setState({loading : true})\n        await fetch(\"https://opentdb.com/api.php?amount=50&type=boolean\")\n            .then(response => response.json())  \n            .then(data => { \n                data.results[0].incorrect_answers.map(\n                    incorrect=>{lista.push(incorrect)\n                    console.log(\"entrou boolean\")\n                    console.log(data)\n                })\n                lista.push(data.results[0].correct_answer)   \n                this.makeSuffle(lista)                \n                this.setState({\n                    loading: false,\n                    listAnwser : lista,\n                    quiz : data,\n                })\n            })\n            console.log(this.state.quiz)\n            console.log(this.state.quiz.results[0].question)\n            this.setState({question:this.state.quiz.results[0].question})\n            this.setState({correct_answer:this.state.quiz.results[0].correct_answer})\n            this.setState({category:this.state.quiz.results[0].category})\n            \n            console.log(this.state.quiz.results[0].correct_answer)\n             \n            return true\n    } \n    \n    createJsonMultiple = async ()=> {\n        let lista = []\n        this.setState({loading : true})\n        await fetch(\"https://opentdb.com/api.php?amount=50&type=multiple\")\n            .then(response => response.json())  \n            .then(data => { \n                data.results[0].incorrect_answers.map(\n                    incorrect=>{lista.push(incorrect)\n                })\n                lista.push(data.results[0].correct_answer)   \n                this.makeSuffle(lista)                \n                this.setState({\n                    loading: false,\n                    listAnwser : lista,\n                    quiz : data,\n                })\n            })\n            console.log(this.state.quiz)\n            console.log(this.state.quiz.results[0].question)\n            this.setState({question:this.state.quiz.results[0].question})\n            this.setState({correct_answer:this.state.quiz.results[0].correct_answer})\n            this.setState({category:this.state.quiz.results[0].category})\n            console.log(this.state.quiz.results[0].correct_answer)\n            \n            return true\n    }\n\n    clicked = (event) => {        \n        if (this.checkAnswer(event.currentTarget.name)){\n            this.createSetState()\n        }\n        //else: parte do game over\n    }\n\n    creatJsonCategory = async(event)=> {\n        console.log(\"entrou creatJsonCategory\")\n        var type = event.target.value\n        console.log(event.target.value) //pegando multiple quando eh pra ser truefalse\n\n        //zerar os dados\n        //zerar o id \n        this.setState({id:0})\n        let b = await this.createScore()\n        console.log(this.state.quiz)\n        console.log(this.state.quiz.results[0].question)\n        //this.setState({question:this.state.quiz.results[0].question})\n        //this.setState({correct_answer:this.state.quiz.results[0].correct_answer})\n\n        \n        \n        if (type === \"anyType\"){\n           // this.createJson()\n            let a = await this.createJson() \n        }\n        if (type === 'multiple'){\n            let a = await this.createJsonMultiple() \n            //this.createJsonMultiple()\n        }\n        if (type === 'boolean'){\n            let a = await this.createJsonBoolean() \n            //this.createJsonBoolean()\n        }    \n    }\n\n    createSetState = () => {\n        //console.log(\"entrou no create state\")\n        //console.log(this.state.id +1) //pois o primeiro foi no componentdidmout\n        let lista = []\n        this.state.quiz.results[this.state.id+1].incorrect_answers.map( \n            incorrect=>{lista.push(incorrect)})\n            \n        let correct = this.state.quiz.results[this.state.id+1].correct_answer\n        console.log(correct)\n        lista.push(correct)\n\n        this.makeSuffle(lista)\n\n        this.setState({\n            question:this.state.quiz.results[this.state.id+1].question,\n            correct_answer:this.state.quiz.results[this.state.id+1].correct_answer,\n            listAnwser: lista  \n        })\n    }\n    checktop10 = (score) => {\n        console.log(\"entrou top 10\")\n        //\n        let scores = this.state.scores_score //lista com todos os scores\n\n        let lastScore = scores[9]\n        //OBS ARRUMAR AQUI PARA > **\n        //NAO ESQUECER DE ARRUMAR AQUI\n        if (score > lastScore){ //////////AAAAAAAAARRRUMAR AQUI\n            var name = prompt(\"GREAT! You are in the top 10, type your name:\");\n            //atualizar o nome da pessoa e o score no banco de dados\n            let usuarios = this.state.usuarios_score\n            let lastUser = usuarios[9]\n\n            //chama funcao updateScore para adicionar o novo score\n            this.insertScore(name, score)\n        }\n\n    }\n\n    checkAnswer = async (answer)=>{\n        if (answer === this.state.correct_answer){\n            let id_novo = this.state.id + 1\n            this.setState({id:id_novo})\n            console.log(\"ACERTO\")\n            //clicked chamao checkAnswer e se true chama createSetState\n            return true\n        }\n        else {\n            console.log(\"ERROU\")\n            alert(\"Wrong answer. Game over.                                                                   The correct answes was: \" + this.state.correct_answer)\n            //alert(\"The correct answes was: \" + this.state.correct_answer)\n            console.log(\"chamando o checktop10\")\n            this.checktop10(this.state.id) //mandando a qtd de acertos e confere se ta no top10\n            \n\n            //zerar o id \n            this.setState({id:0})\n            let a = await this.createJson() \n            let b = await this.createScore()\n            console.log(\"TESTE\")\n            console.log(this.state.quiz)\n            console.log(this.state.quiz.results[0].question)\n            this.setState({question:this.state.quiz.results[0].question})\n            this.setState({correct_answer:this.state.quiz.results[0].correct_answer})\n                \n                return false \n        }\n    }\n\n    handleSubmit(event){\n        event.preventDefault();\n\n    }\n\n    makeSuffle(lista){\n        for (var i = lista.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = lista[i];\n            lista[i] = lista[j];\n            lista[j] = temp;\n        }\n    }\n\n    createScore = async ()=> {\n        let listaUsuarios = []\n        let listaScores = []\n    \n        //console.log(\"entrou no createScore\")\n        this.setState({loading : true})\n        await fetch(\"http://localhost:4000/highscore\")\n            .then(response => response.json())  \n            .then(data => { \n                this.setState({\n                    highscore : data,\n                    usuarios_score : listaUsuarios,\n                    scores_score : listaScores\n                })\n                //console.log(data)    \n                //his.state.highscore.push(data)\n                //console.log(this.state.highscore.data[0].usuario)\n                \n                for (var i=0; i<10; i++){\n                    // console.log(i)\n                    // console.log(this.state.highscore.data[i].usuario)\n                    listaUsuarios.push(this.state.highscore.data[i].usuario)\n                    listaScores.push(this.state.highscore.data[i].score)\n                }\n\n            })\n            return true\n    }  \n    \n    insertScore = async (name, score)=> {\n        console.log(\"name: \" + name)\n        console.log(\"score: \" + score)\n        this.setState({loading : true})\n        await axios.get(\"http://localhost:4000/insert\",{\n            params:{\n                name,score\n            }\n            \n        })\n\n            return true\n    } \n    \n    render() {\n        // const frist = \"primeiro\"\n        // const second = \"segundo\"\n        const date = new Date()\n        const hours = date.getHours()\n        let timeOfDay\n\n        if (hours<12){\n            timeOfDay = \"morning\"\n        } else if (hours>=12 && hours <17){\n            timeOfDay = \"afternon\"\n        } else {\n            timeOfDay = \"night\"\n        }\n\n        const text = this.state.loading ? \"loading...\" : this.state.quiz.question\n        //console.log(this.state.question)\n        return( \n            \n            <div>\n                <nav>\n                {/* <h1>teste {frist + \" \" + second }</h1>\n                <h2>oalaa {`${frist}`}</h2> */}\n                \n                <h3>Good {timeOfDay}!! Let's play trivia?</h3>\n                {/* <Header/>\n                <Footer/>*/}\n                </nav>\n                <main>\n                \n                <h6>Choose the type: </h6>\n                <form>\n                <select name=\"option\" onChange={this.creatJsonCategory}>\n                    <option value=\"anyType\">Any category</option>\n                    <option value=\"multiple\">Multiple Choiche</option> \n                    <option value=\"boolean\">True / False</option>\n                </select>\n                </form>\n                {/* <h6 id=\"textCategory\"></h6> */}\n                \n                <Question question={this.state.question} id={this.state.id} category={this.state.category}/>\n                <p>{text}</p>\n\n                <button onClick={this.clicked} type=\"submit\" name={this.state.listAnwser[0]} style={{display: !this.state.listAnwser[0] && \"none\"}}>{this.state.listAnwser[0]}</button>\n                <button onClick={this.clicked} type=\"submit\" name={this.state.listAnwser[1]}  style={{display: !this.state.listAnwser[1] && \"none\"}}>{this.state.listAnwser[1]}</button>\n                <br/><br/>\n                <button onClick={this.clicked} type=\"submit\" name={this.state.listAnwser[2]}  style={{display: !this.state.listAnwser[2] && \"none\"}}>{this.state.listAnwser[2]}</button>\n                <button onClick={this.clicked} type=\"submit\" name={this.state.listAnwser[3]}  style={{display: !this.state.listAnwser[3] && \"none\"}}>{this.state.listAnwser[3]}</button>\n                               \n                <br></br><br></br> \n\n                <h5>Quantidade de acertos: {this.state.id} </h5>\n                <hr/>  \n                \n                <Highscore usuarios={this.state.usuarios_score} scores={this.state.scores_score}/>\n\n\n                {/* <button disabled type=\"button\"> {this.state.id} </button>\n             */}\n                {/* <h4>{JSON.stringify(this.state.quiz[0])}</h4> */}\n                </main>\n            </div> \n        )\n    }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}